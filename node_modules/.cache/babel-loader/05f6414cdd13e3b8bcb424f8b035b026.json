{"ast":null,"code":"import _regeneratorRuntime from\"/Users/admin/Desktop/Java-React/Day 9/01-we-full-stack-record-react-front-end/solution/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/admin/Desktop/Java-React/Day 9/01-we-full-stack-record-react-front-end/solution/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Text}from'@chakra-ui/react';import api from'api';import{Form,Table}from'components/records';import{useMutation,useQuery,useQueryClient}from'react-query';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var fetchRecords=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return api.index();case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function fetchRecords(){return _ref.apply(this,arguments);};}();function Records(){var _useQuery=useQuery('records',fetchRecords),status=_useQuery.status,data=_useQuery.data,error=_useQuery.error;var queryClient=useQueryClient();var addRecord=useMutation(function(payload){return api.create(payload);});var handleSubmit=function handleSubmit(event){event.preventDefault();addRecord.mutate(Object.fromEntries(new FormData(event.target)),{onSuccess:function onSuccess(){queryClient.invalidateQueries('records');}});};switch(status){case'loading':return/*#__PURE__*/_jsx(Text,{children:\"Loading...\"});case'error':return/*#__PURE__*/_jsx(Text,{color:\"tomato\",children:error.message});default:return/*#__PURE__*/_jsxs(\"main\",{className:\"container mx-auto\",children:[/*#__PURE__*/_jsx(Table,{records:data}),/*#__PURE__*/_jsx(Form,{handler:handleSubmit})]});}}export default Records;","map":{"version":3,"sources":["/Users/admin/Desktop/Java-React/Day 9/01-we-full-stack-record-react-front-end/solution/src/pages/Records.js"],"names":["Text","api","Form","Table","useMutation","useQuery","useQueryClient","fetchRecords","index","Records","status","data","error","queryClient","addRecord","payload","create","handleSubmit","event","preventDefault","mutate","Object","fromEntries","FormData","target","onSuccess","invalidateQueries","message"],"mappings":"+UAAA,OAASA,IAAT,KAAqB,kBAArB,CACA,MAAOC,CAAAA,GAAP,KAAgB,KAAhB,CACA,OAASC,IAAT,CAAeC,KAAf,KAA4B,oBAA5B,CACA,OAASC,WAAT,CAAsBC,QAAtB,CAAgCC,cAAhC,KAAsD,aAAtD,C,wFAEA,GAAMC,CAAAA,YAAY,0FAAG,yJAAkBN,CAAAA,GAAG,CAACO,KAAJ,EAAlB,6GAAH,kBAAZD,CAAAA,YAAY,0CAAlB,CAEA,QAASE,CAAAA,OAAT,EAAmB,eACeJ,QAAQ,CAAC,SAAD,CAAYE,YAAZ,CADvB,CACTG,MADS,WACTA,MADS,CACDC,IADC,WACDA,IADC,CACKC,KADL,WACKA,KADL,CAEjB,GAAMC,CAAAA,WAAW,CAAGP,cAAc,EAAlC,CAEA,GAAMQ,CAAAA,SAAS,CAAGV,WAAW,CAAC,SAAAW,OAAO,QAAId,CAAAA,GAAG,CAACe,MAAJ,CAAWD,OAAX,CAAJ,EAAR,CAA7B,CAEA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,CAC5BA,KAAK,CAACC,cAAN,GACAL,SAAS,CAACM,MAAV,CAAiBC,MAAM,CAACC,WAAP,CAAmB,GAAIC,CAAAA,QAAJ,CAAaL,KAAK,CAACM,MAAnB,CAAnB,CAAjB,CAAiE,CAC/DC,SAAS,CAAE,oBAAM,CACfZ,WAAW,CAACa,iBAAZ,CAA8B,SAA9B,EACD,CAH8D,CAAjE,EAKD,CAPD,CASA,OAAQhB,MAAR,EACE,IAAK,SAAL,CACE,mBAAO,KAAC,IAAD,yBAAP,CACF,IAAK,OAAL,CACE,mBAAO,KAAC,IAAD,EAAM,KAAK,CAAC,QAAZ,UAAsBE,KAAK,CAACe,OAA5B,EAAP,CACF,QACE,mBACE,cAAM,SAAS,CAAC,mBAAhB,wBACE,KAAC,KAAD,EAAO,OAAO,CAAEhB,IAAhB,EADF,cAEE,KAAC,IAAD,EAAM,OAAO,CAAEM,YAAf,EAFF,GADF,CANJ,CAaD,CAED,cAAeR,CAAAA,OAAf","sourcesContent":["import { Text } from '@chakra-ui/react';\nimport api from 'api';\nimport { Form, Table } from 'components/records';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nconst fetchRecords = async () => await api.index();\n\nfunction Records() {\n  const { status, data, error } = useQuery('records', fetchRecords);\n  const queryClient = useQueryClient();\n\n  const addRecord = useMutation(payload => api.create(payload));\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    addRecord.mutate(Object.fromEntries(new FormData(event.target)), {\n      onSuccess: () => {\n        queryClient.invalidateQueries('records');\n      },\n    });\n  };\n\n  switch (status) {\n    case 'loading':\n      return <Text>Loading...</Text>;\n    case 'error':\n      return <Text color=\"tomato\">{error.message}</Text>;\n    default:\n      return (\n        <main className=\"container mx-auto\">\n          <Table records={data} />\n          <Form handler={handleSubmit} />\n        </main>\n      );\n  }\n}\n\nexport default Records;\n"]},"metadata":{},"sourceType":"module"}