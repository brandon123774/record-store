{"ast":null,"code":"/*! MIT License Â© Sindre Sorhus */\nconst isObject = value => value !== null && typeof value === 'object';\n\nconst supportsAbortController = typeof globalThis.AbortController === 'function';\nconst supportsStreams = typeof globalThis.ReadableStream === 'function';\nconst supportsFormData = typeof globalThis.FormData === 'function';\n\nconst mergeHeaders = (source1, source2) => {\n  const result = new globalThis.Headers(source1 || {});\n  const isHeadersInstance = source2 instanceof globalThis.Headers;\n  const source = new globalThis.Headers(source2 || {});\n\n  for (const [key, value] of source) {\n    if (isHeadersInstance && value === 'undefined' || value === undefined) {\n      result.delete(key);\n    } else {\n      result.set(key, value);\n    }\n  }\n\n  return result;\n};\n\nconst deepMerge = (...sources) => {\n  let returnValue = {};\n  let headers = {};\n\n  for (const source of sources) {\n    if (Array.isArray(source)) {\n      if (!Array.isArray(returnValue)) {\n        returnValue = [];\n      }\n\n      returnValue = [...returnValue, ...source];\n    } else if (isObject(source)) {\n      for (let [key, value] of Object.entries(source)) {\n        if (isObject(value) && key in returnValue) {\n          value = deepMerge(returnValue[key], value);\n        }\n\n        returnValue = { ...returnValue,\n          [key]: value\n        };\n      }\n\n      if (isObject(source.headers)) {\n        headers = mergeHeaders(headers, source.headers);\n      }\n    }\n\n    returnValue.headers = headers;\n  }\n\n  return returnValue;\n};\n\nconst requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'];\nconst responseTypes = {\n  json: 'application/json',\n  text: 'text/*',\n  formData: 'multipart/form-data',\n  arrayBuffer: '*/*',\n  blob: '*/*'\n};\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\nconst retryAfterStatusCodes = [413, 429, 503];\nconst stop = Symbol('stop');\n\nclass HTTPError extends Error {\n  constructor(response, request, options) {\n    // Set the message to the status text, such as Unauthorized,\n    // with some fallbacks. This message should never be undefined.\n    super(response.statusText || String(response.status === 0 || response.status ? response.status : 'Unknown response error'));\n    this.name = 'HTTPError';\n    this.response = response;\n    this.request = request;\n    this.options = options;\n  }\n\n}\n\nclass TimeoutError extends Error {\n  constructor(request) {\n    super('Request timed out');\n    this.name = 'TimeoutError';\n    this.request = request;\n  }\n\n}\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms)); // `Promise.race()` workaround (#91)\n\n\nconst timeout = (request, abortController, options) => new Promise((resolve, reject) => {\n  const timeoutID = setTimeout(() => {\n    if (abortController) {\n      abortController.abort();\n    }\n\n    reject(new TimeoutError(request));\n  }, options.timeout);\n  /* eslint-disable promise/prefer-await-to-then */\n\n  options.fetch(request).then(resolve).catch(reject).then(() => {\n    clearTimeout(timeoutID);\n  });\n  /* eslint-enable promise/prefer-await-to-then */\n});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n  limit: 2,\n  methods: retryMethods,\n  statusCodes: retryStatusCodes,\n  afterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = (retry = {}) => {\n  if (typeof retry === 'number') {\n    return { ...defaultRetryOptions,\n      limit: retry\n    };\n  }\n\n  if (retry.methods && !Array.isArray(retry.methods)) {\n    throw new Error('retry.methods must be an array');\n  }\n\n  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n    throw new Error('retry.statusCodes must be an array');\n  }\n\n  return { ...defaultRetryOptions,\n    ...retry,\n    afterStatusCodes: retryAfterStatusCodes\n  };\n}; // The maximum value of a 32bit int (see issue #117)\n\n\nconst maxSafeTimeout = 2147483647;\n\nclass Ky {\n  constructor(input, options = {}) {\n    this._retryCount = 0;\n    this._input = input;\n    this._options = {\n      // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n      credentials: this._input.credentials || 'same-origin',\n      ...options,\n      headers: mergeHeaders(this._input.headers, options.headers),\n      hooks: deepMerge({\n        beforeRequest: [],\n        beforeRetry: [],\n        afterResponse: []\n      }, options.hooks),\n      method: normalizeRequestMethod(options.method || this._input.method),\n      prefixUrl: String(options.prefixUrl || ''),\n      retry: normalizeRetryOptions(options.retry),\n      throwHttpErrors: options.throwHttpErrors !== false,\n      timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n      fetch: options.fetch || globalThis.fetch.bind(globalThis)\n    };\n\n    if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n      throw new TypeError('`input` must be a string, URL, or Request');\n    }\n\n    if (this._options.prefixUrl && typeof this._input === 'string') {\n      if (this._input.startsWith('/')) {\n        throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n      }\n\n      if (!this._options.prefixUrl.endsWith('/')) {\n        this._options.prefixUrl += '/';\n      }\n\n      this._input = this._options.prefixUrl + this._input;\n    }\n\n    if (supportsAbortController) {\n      this.abortController = new globalThis.AbortController();\n\n      if (this._options.signal) {\n        this._options.signal.addEventListener('abort', () => {\n          this.abortController.abort();\n        });\n      }\n\n      this._options.signal = this.abortController.signal;\n    }\n\n    this.request = new globalThis.Request(this._input, this._options);\n\n    if (this._options.searchParams) {\n      const textSearchParams = typeof this._options.searchParams === 'string' ? this._options.searchParams.replace(/^\\?/, '') : new URLSearchParams(this._options.searchParams).toString();\n      const searchParams = '?' + textSearchParams;\n      const url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams); // To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\n      if ((supportsFormData && this._options.body instanceof globalThis.FormData || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n        this.request.headers.delete('content-type');\n      }\n\n      this.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n    }\n\n    if (this._options.json !== undefined) {\n      this._options.body = JSON.stringify(this._options.json);\n      this.request.headers.set('content-type', 'application/json');\n      this.request = new globalThis.Request(this.request, {\n        body: this._options.body\n      });\n    }\n\n    const fn = async () => {\n      if (this._options.timeout > maxSafeTimeout) {\n        throw new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n      }\n\n      await delay(1);\n      let response = await this._fetch();\n\n      for (const hook of this._options.hooks.afterResponse) {\n        // eslint-disable-next-line no-await-in-loop\n        const modifiedResponse = await hook(this.request, this._options, this._decorateResponse(response.clone()));\n\n        if (modifiedResponse instanceof globalThis.Response) {\n          response = modifiedResponse;\n        }\n      }\n\n      this._decorateResponse(response);\n\n      if (!response.ok && this._options.throwHttpErrors) {\n        throw new HTTPError(response, this.request, this._options);\n      } // If `onDownloadProgress` is passed, it uses the stream API internally\n\n      /* istanbul ignore next */\n\n\n      if (this._options.onDownloadProgress) {\n        if (typeof this._options.onDownloadProgress !== 'function') {\n          throw new TypeError('The `onDownloadProgress` option must be a function');\n        }\n\n        if (!supportsStreams) {\n          throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n        }\n\n        return this._stream(response.clone(), this._options.onDownloadProgress);\n      }\n\n      return response;\n    };\n\n    const isRetriableMethod = this._options.retry.methods.includes(this.request.method.toLowerCase());\n\n    const result = isRetriableMethod ? this._retry(fn) : fn();\n\n    for (const [type, mimeType] of Object.entries(responseTypes)) {\n      result[type] = async () => {\n        this.request.headers.set('accept', this.request.headers.get('accept') || mimeType);\n        const response = (await result).clone();\n\n        if (type === 'json') {\n          if (response.status === 204) {\n            return '';\n          }\n\n          if (options.parseJson) {\n            return options.parseJson(await response.text());\n          }\n        }\n\n        return response[type]();\n      };\n    }\n\n    return result;\n  }\n\n  _calculateRetryDelay(error) {\n    this._retryCount++;\n\n    if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n      if (error instanceof HTTPError) {\n        if (!this._options.retry.statusCodes.includes(error.response.status)) {\n          return 0;\n        }\n\n        const retryAfter = error.response.headers.get('Retry-After');\n\n        if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n          let after = Number(retryAfter);\n\n          if (Number.isNaN(after)) {\n            after = Date.parse(retryAfter) - Date.now();\n          } else {\n            after *= 1000;\n          }\n\n          if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n            return 0;\n          }\n\n          return after;\n        }\n\n        if (error.response.status === 413) {\n          return 0;\n        }\n      }\n\n      const BACKOFF_FACTOR = 0.3;\n      return BACKOFF_FACTOR * 2 ** (this._retryCount - 1) * 1000;\n    }\n\n    return 0;\n  }\n\n  _decorateResponse(response) {\n    if (this._options.parseJson) {\n      response.json = async () => {\n        return this._options.parseJson(await response.text());\n      };\n    }\n\n    return response;\n  }\n\n  async _retry(fn) {\n    try {\n      return await fn();\n    } catch (error) {\n      const ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\n      if (ms !== 0 && this._retryCount > 0) {\n        await delay(ms);\n\n        for (const hook of this._options.hooks.beforeRetry) {\n          // eslint-disable-next-line no-await-in-loop\n          const hookResult = await hook({\n            request: this.request,\n            options: this._options,\n            error,\n            retryCount: this._retryCount\n          }); // If `stop` is returned from the hook, the retry process is stopped\n\n          if (hookResult === stop) {\n            return;\n          }\n        }\n\n        return this._retry(fn);\n      }\n\n      if (this._options.throwHttpErrors) {\n        throw error;\n      }\n    }\n  }\n\n  async _fetch() {\n    for (const hook of this._options.hooks.beforeRequest) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await hook(this.request, this._options);\n\n      if (result instanceof Request) {\n        this.request = result;\n        break;\n      }\n\n      if (result instanceof Response) {\n        return result;\n      }\n    }\n\n    if (this._options.timeout === false) {\n      return this._options.fetch(this.request.clone());\n    }\n\n    return timeout(this.request.clone(), this.abortController, this._options);\n  }\n  /* istanbul ignore next */\n\n\n  _stream(response, onDownloadProgress) {\n    const totalBytes = Number(response.headers.get('content-length')) || 0;\n    let transferredBytes = 0;\n    return new globalThis.Response(new globalThis.ReadableStream({\n      async start(controller) {\n        const reader = response.body.getReader();\n\n        if (onDownloadProgress) {\n          onDownloadProgress({\n            percent: 0,\n            transferredBytes: 0,\n            totalBytes\n          }, new Uint8Array());\n        }\n\n        async function read() {\n          const {\n            done,\n            value\n          } = await reader.read();\n\n          if (done) {\n            controller.close();\n            return;\n          }\n\n          if (onDownloadProgress) {\n            transferredBytes += value.byteLength;\n            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n            onDownloadProgress({\n              percent,\n              transferredBytes,\n              totalBytes\n            }, value);\n          }\n\n          controller.enqueue(value);\n          await read();\n        }\n\n        await read();\n      }\n\n    }));\n  }\n\n}\n\nconst validateAndMerge = (...sources) => {\n  for (const source of sources) {\n    if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n      throw new TypeError('The `options` argument must be an object');\n    }\n  }\n\n  return deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n  const ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n  for (const method of requestMethods) {\n    ky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {\n      method\n    }));\n  }\n\n  ky.HTTPError = HTTPError;\n  ky.TimeoutError = TimeoutError;\n\n  ky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\n  ky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\n  ky.stop = stop;\n  return ky;\n};\n\nconst ky = createInstance();\nexport default ky;","map":{"version":3,"sources":["/Users/admin/Desktop/Java-React/Day 9/01-we-full-stack-record-react-front-end/solution/node_modules/ky/index.js"],"names":["isObject","value","supportsAbortController","globalThis","AbortController","supportsStreams","ReadableStream","supportsFormData","FormData","mergeHeaders","source1","source2","result","Headers","isHeadersInstance","source","key","undefined","delete","set","deepMerge","sources","returnValue","headers","Array","isArray","Object","entries","requestMethods","responseTypes","json","text","formData","arrayBuffer","blob","retryMethods","retryStatusCodes","retryAfterStatusCodes","stop","Symbol","HTTPError","Error","constructor","response","request","options","statusText","String","status","name","TimeoutError","delay","ms","Promise","resolve","setTimeout","timeout","abortController","reject","timeoutID","abort","fetch","then","catch","clearTimeout","normalizeRequestMethod","input","includes","toUpperCase","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","normalizeRetryOptions","retry","maxSafeTimeout","Ky","_retryCount","_input","_options","credentials","hooks","beforeRequest","beforeRetry","afterResponse","method","prefixUrl","throwHttpErrors","bind","URL","Request","TypeError","startsWith","endsWith","signal","addEventListener","searchParams","textSearchParams","replace","URLSearchParams","toString","url","body","JSON","stringify","fn","RangeError","_fetch","hook","modifiedResponse","_decorateResponse","clone","Response","ok","onDownloadProgress","_stream","isRetriableMethod","toLowerCase","_retry","type","mimeType","get","parseJson","_calculateRetryDelay","error","retryAfter","after","Number","isNaN","Date","parse","now","maxRetryAfter","BACKOFF_FACTOR","Math","min","hookResult","retryCount","totalBytes","transferredBytes","start","controller","reader","getReader","percent","Uint8Array","read","done","close","byteLength","enqueue","validateAndMerge","createInstance","defaults","ky","create","newDefaults","extend"],"mappings":"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","sourcesContent":["/*! MIT License Â© Sindre Sorhus */\n\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof globalThis.AbortController === 'function';\nconst supportsStreams = typeof globalThis.ReadableStream === 'function';\nconst supportsFormData = typeof globalThis.FormData === 'function';\n\nconst mergeHeaders = (source1, source2) => {\n\tconst result = new globalThis.Headers(source1 || {});\n\tconst isHeadersInstance = source2 instanceof globalThis.Headers;\n\tconst source = new globalThis.Headers(source2 || {});\n\n\tfor (const [key, value] of source) {\n\t\tif ((isHeadersInstance && value === 'undefined') || value === undefined) {\n\t\t\tresult.delete(key);\n\t\t} else {\n\t\t\tresult.set(key, value);\n\t\t}\n\t}\n\n\treturn result;\n};\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\tlet headers = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && (key in returnValue)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\n\t\t\tif (isObject(source.headers)) {\n\t\t\t\theaders = mergeHeaders(headers, source.headers);\n\t\t\t}\n\t\t}\n\n\t\treturnValue.headers = headers;\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*'\n};\n\nconst retryMethods = [\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n];\n\nconst retryStatusCodes = [\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n];\n\nconst retryAfterStatusCodes = [\n\t413,\n\t429,\n\t503\n];\n\nconst stop = Symbol('stop');\n\nclass HTTPError extends Error {\n\tconstructor(response, request, options) {\n\t\t// Set the message to the status text, such as Unauthorized,\n\t\t// with some fallbacks. This message should never be undefined.\n\t\tsuper(\n\t\t\tresponse.statusText ||\n\t\t\tString(\n\t\t\t\t(response.status === 0 || response.status) ?\n\t\t\t\t\tresponse.status : 'Unknown response error'\n\t\t\t)\n\t\t);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t\tthis.request = request;\n\t\tthis.options = options;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor(request) {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t\tthis.request = request;\n\t}\n}\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// `Promise.race()` workaround (#91)\nconst timeout = (request, abortController, options) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst timeoutID = setTimeout(() => {\n\t\t\tif (abortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError(request));\n\t\t}, options.timeout);\n\n\t\t/* eslint-disable promise/prefer-await-to-then */\n\t\toptions.fetch(request)\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutID);\n\t\t\t});\n\t\t/* eslint-enable promise/prefer-await-to-then */\n\t});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = (retry = {}) => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes\n\t};\n};\n\n// The maximum value of a 32bit int (see issue #117)\nconst maxSafeTimeout = 2147483647;\n\nclass Ky {\n\tconstructor(input, options = {}) {\n\t\tthis._retryCount = 0;\n\t\tthis._input = input;\n\t\tthis._options = {\n\t\t\t// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tcredentials: this._input.credentials || 'same-origin',\n\t\t\t...options,\n\t\t\theaders: mergeHeaders(this._input.headers, options.headers),\n\t\t\thooks: deepMerge({\n\t\t\t\tbeforeRequest: [],\n\t\t\t\tbeforeRetry: [],\n\t\t\t\tafterResponse: []\n\t\t\t}, options.hooks),\n\t\t\tmethod: normalizeRequestMethod(options.method || this._input.method),\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n\t\t\tfetch: options.fetch || globalThis.fetch.bind(globalThis)\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globalThis.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController.abort();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis.request = new globalThis.Request(this._input, this._options);\n\n\t\tif (this._options.searchParams) {\n\t\t\tconst textSearchParams = typeof this._options.searchParams === 'string' ?\n\t\t\t\tthis._options.searchParams.replace(/^\\?/, '') :\n\t\t\t\tnew URLSearchParams(this._options.searchParams).toString();\n\t\t\tconst searchParams = '?' + textSearchParams;\n\t\t\tconst url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n\n\t\t\t// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\t\t\tif (((supportsFormData && this._options.body instanceof globalThis.FormData) || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n\t\t\t\tthis.request.headers.delete('content-type');\n\t\t\t}\n\n\t\t\tthis.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n\t\t}\n\n\t\tif (this._options.json !== undefined) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', 'application/json');\n\t\t\tthis.request = new globalThis.Request(this.request, {body: this._options.body});\n\t\t}\n\n\t\tconst fn = async () => {\n\t\t\tif (this._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\tawait delay(1);\n\t\t\tlet response = await this._fetch();\n\n\t\t\tfor (const hook of this._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tthis.request,\n\t\t\t\t\tthis._options,\n\t\t\t\t\tthis._decorateResponse(response.clone())\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globalThis.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._decorateResponse(response);\n\n\t\t\tif (!response.ok && this._options.throwHttpErrors) {\n\t\t\t\tthrow new HTTPError(response, this.request, this._options);\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this._options.onDownloadProgress) {\n\t\t\t\tif (typeof this._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn this._stream(response.clone(), this._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = this._options.retry.methods.includes(this.request.method.toLowerCase());\n\t\tconst result = isRetriableMethod ? this._retry(fn) : fn();\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes)) {\n\t\t\tresult[type] = async () => {\n\t\t\t\tthis.request.headers.set('accept', this.request.headers.get('accept') || mimeType);\n\n\t\t\t\tconst response = (await result).clone();\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tif (response.status === 204) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.parseJson) {\n\t\t\t\t\t\treturn options.parseJson(await response.text());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t_decorateResponse(response) {\n\t\tif (this._options.parseJson) {\n\t\t\tresponse.json = async () => {\n\t\t\t\treturn this._options.parseJson(await response.text());\n\t\t\t};\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tasync _retry(fn) {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook({\n\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\toptions: this._options,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tretryCount: this._retryCount\n\t\t\t\t\t});\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tif (this._options.throwHttpErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, this._options);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn this._options.fetch(this.request.clone());\n\t\t}\n\n\t\treturn timeout(this.request.clone(), this.abortController, this._options);\n\t}\n\n\t/* istanbul ignore next */\n\t_stream(response, onDownloadProgress) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new globalThis.Response(\n\t\t\tnew globalThis.ReadableStream({\n\t\t\t\tasync start(controller) {\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tawait read();\n\t\t\t\t\t}\n\n\t\t\t\t\tawait read();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst validateAndMerge = (...sources) => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n\tconst ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.HTTPError = HTTPError;\n\tky.TimeoutError = TimeoutError;\n\tky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\tky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\tky.stop = stop;\n\n\treturn ky;\n};\n\nconst ky = createInstance();\n\nexport default ky;\n"]},"metadata":{},"sourceType":"module"}