{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Java-React/Day 9/01-we-full-stack-record-react-front-end/solution/src/components/records/RecordsTable/index.js\",\n    _s = $RefreshSig$();\n\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { Button, Table, TableCaption, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\nimport api from 'api';\nimport PropTypes from 'prop-types';\nimport { useMutation, useQueryClient } from 'react-query';\nimport EditableText from './EditableText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RecordsTable({\n  records\n}) {\n  _s();\n\n  const queryClient = useQueryClient();\n  const updateRecord = useMutation(({\n    payload,\n    id\n  }) => api.update(payload, id));\n  const deleteRecord = useMutation(id => api.delete(id));\n\n  function handleDelete(event) {\n    deleteRecord.mutate(event.target.dataset.id, {\n      onSuccess: async () => {\n        queryClient.invalidateQueries('records');\n      }\n    });\n  }\n\n  function handleUpdate(event) {\n    const updatedRecord = { ...records.find(({\n        id\n      }) => id === // ⚠️ Make sure to check as a number!\n      Number(event.target.dataset.id)),\n      ...{\n        [event.target.dataset.key]: event.target.value\n      }\n    };\n    updateRecord.mutate({\n      payload: updatedRecord,\n      id: event.target.dataset.id\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    variant: \"simple\",\n    children: [/*#__PURE__*/_jsxDEV(TableCaption, {\n      children: \"Click on any data to edit \\uD83D\\uDCDD it.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Thead, {\n      children: /*#__PURE__*/_jsxDEV(Tr, {\n        children: [/*#__PURE__*/_jsxDEV(Th, {\n          children: \"Artist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Th, {\n          children: \"Album\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Th, {\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n      children: records.map(({\n        id,\n        artist,\n        album,\n        year\n      }) => /*#__PURE__*/_jsxDEV(Tr, {\n        children: [/*#__PURE__*/_jsxDEV(Td, {\n          children: /*#__PURE__*/_jsxDEV(EditableText, {\n            value: artist,\n            handler: handleUpdate,\n            recordKey: \"artist\",\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Td, {\n          children: /*#__PURE__*/_jsxDEV(EditableText, {\n            value: album,\n            handler: handleUpdate,\n            recordKey: \"album\",\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Td, {\n          children: /*#__PURE__*/_jsxDEV(EditableText, {\n            value: year,\n            handler: handleUpdate,\n            recordKey: \"year\",\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Td, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            leftIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 27\n            }, this),\n            colorScheme: \"teal\",\n            variant: \"solid\",\n            size: \"xs\",\n            onClick: handleDelete,\n            \"data-id\": id,\n            children: \"Delete \\uD83D\\uDD25\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RecordsTable, \"gY26FLWAaA2hJTxGVuSo4fDwzPg=\", false, function () {\n  return [useQueryClient, useMutation, useMutation];\n});\n\n_c = RecordsTable;\nRecordsTable.propTypes = {\n  records: PropTypes.arrayOf(PropTypes.exact({\n    artist: PropTypes.string.isRequired,\n    album: PropTypes.string.isRequired,\n    year: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired\n  }))\n};\nexport default RecordsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecordsTable\");","map":{"version":3,"sources":["/Users/admin/Desktop/Java-React/Day 9/01-we-full-stack-record-react-front-end/solution/src/components/records/RecordsTable/index.js"],"names":["DeleteIcon","Button","Table","TableCaption","Tbody","Td","Th","Thead","Tr","api","PropTypes","useMutation","useQueryClient","EditableText","RecordsTable","records","queryClient","updateRecord","payload","id","update","deleteRecord","delete","handleDelete","event","mutate","target","dataset","onSuccess","invalidateQueries","handleUpdate","updatedRecord","find","Number","key","value","map","artist","album","year","propTypes","arrayOf","exact","string","isRequired","number"],"mappings":"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","sourcesContent":["import { DeleteIcon } from '@chakra-ui/icons';\nimport {\n  Button,\n  Table,\n  TableCaption,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@chakra-ui/react';\nimport api from 'api';\nimport PropTypes from 'prop-types';\nimport { useMutation, useQueryClient } from 'react-query';\nimport EditableText from './EditableText';\n\nfunction RecordsTable({ records }) {\n  const queryClient = useQueryClient();\n\n  const updateRecord = useMutation(({ payload, id }) =>\n    api.update(payload, id)\n  );\n\n  const deleteRecord = useMutation(id => api.delete(id));\n\n  function handleDelete(event) {\n    deleteRecord.mutate(event.target.dataset.id, {\n      onSuccess: async () => {\n        queryClient.invalidateQueries('records');\n      },\n    });\n  }\n\n  function handleUpdate(event) {\n    const updatedRecord = {\n      ...records.find(\n        ({ id }) =>\n          id ===\n          // ⚠️ Make sure to check as a number!\n          Number(event.target.dataset.id)\n      ),\n      ...{ [event.target.dataset.key]: event.target.value },\n    };\n\n    updateRecord.mutate({\n      payload: updatedRecord,\n      id: event.target.dataset.id,\n    });\n  }\n\n  return (\n    <Table variant=\"simple\">\n      <TableCaption>Click on any data to edit 📝 it.</TableCaption>\n      <Thead>\n        <Tr>\n          <Th>Artist</Th>\n          <Th>Album</Th>\n          <Th>Year</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {records.map(({ id, artist, album, year }) => (\n          <Tr key={id}>\n            <Td>\n              <EditableText\n                value={artist}\n                handler={handleUpdate}\n                recordKey=\"artist\"\n                id={id}\n              />\n            </Td>\n            <Td>\n              <EditableText\n                value={album}\n                handler={handleUpdate}\n                recordKey=\"album\"\n                id={id}\n              />\n            </Td>\n            <Td>\n              <EditableText\n                value={year}\n                handler={handleUpdate}\n                recordKey=\"year\"\n                id={id}\n              />\n            </Td>\n            <Td>\n              <Button\n                leftIcon={<DeleteIcon />}\n                colorScheme=\"teal\"\n                variant=\"solid\"\n                size=\"xs\"\n                onClick={handleDelete}\n                data-id={id}\n              >\n                Delete 🔥\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n}\n\nRecordsTable.propTypes = {\n  records: PropTypes.arrayOf(\n    PropTypes.exact({\n      artist: PropTypes.string.isRequired,\n      album: PropTypes.string.isRequired,\n      year: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default RecordsTable;\n"]},"metadata":{},"sourceType":"module"}